function ballLoad()
  love.physics.setMeter(64)
  world = love.phycis.newWorld(0, 9.18 * 64, true)
  
  objects = {}
  
  objects.ball1 = {}
  objects.ball1.body = love.physics.newBody(world, 360/2, 50, "dynamic") --place the body in the center of the world and make it dynamic, so it can move around
  objects.ball1.shape = love.physics.newCircleShape( 20) --the ball's shape has a radius of 20
  objects.ball1.fixture = love.physics.newFixture(objects.ball.body, objects.ball.shape, 1) -- Attach fixture to body and give it a density of 1.
  objects.ball1.fixture:setRestitution(0.9) --let the ball bounce
  
  objects.ball2 = {}
  objects.ball2.body = love.physics.newBody(world, 360/2, 50, "dynamic") --place the body in the center of the world and make it dynamic, so it can move around
  objects.ball2.shape = love.physics.newCircleShape( 20) --the ball's shape has a radius of 20
  objects.ball2.fixture = love.physics.newFixture(objects.ball.body, objects.ball.shape, 1) -- Attach fixture to body and give it a density of 1.
  objects.ball2.fixture:setRestitution(0.9) --let the ball bounce
  
  love.graphics.setBackgroundColor(104, 136, 248) --set the background color to a nice blue
  love.window.setMode(360, 640) --set the window dimensions to 650 by 650 with no fullscreen, vsync on, and no antialiasing
end

function ballUpdate(dt)
  world:update(dt) --this puts the world into motion
 
  --here we are going to create some keyboard events
  if love.keyboard.isDown("right") then --press the right arrow key to push the ball to the right
    objects.ball.body:applyForce(400, 0)
  elseif love.keyboard.isDown("left") then --press the left arrow key to push the ball to the left
    objects.ball.body:applyForce(-400, 0)
  elseif love.keyboard.isDown("up") then --press the up arrow key to set the ball in the air
    objects.ball.body:setPosition(650/2, 650/2)
    objects.ball.body:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
  end
end

function ballDraw()
  love.graphics.setColor(72, 160, 14) -- set the drawing color to green for the ground
  love.graphics.polygon("fill", objects.ground.body:getWorldPoints(objects.ground.shape:getPoints())) -- draw a "filled in" polygon using the ground's coordinates
  
  love.graphics.setColor(193, 47, 14) --set the drawing color to red for the ball
  love.graphics.circle("fill", objects.ball.body:getX(), objects.ball.body:getY(), objects.ball.shape:getRadius())
 
  love.graphics.setColor(50, 50, 50) -- set the drawing color to grey for the blocks
  love.graphics.polygon("fill", objects.block1.body:getWorldPoints(objects.block1.shape:getPoints()))
  love.graphics.polygon("fill", objects.block2.body:getWorldPoints(objects.block2.shape:getPoints()))
end